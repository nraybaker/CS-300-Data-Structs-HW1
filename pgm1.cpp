/******************************************************************************
	Author: Nathan Baker
	Student ID: A767P375
	Program: #1
	Class: CS 300
	
	Description:
	You are the owner of a new store and need to keep track of your inventory.  
Since you are a seasoned C++ programmer, you are going to write a C++ 
program to perform this function. 

Define a structure that will hold a a part number (integer), 
description of the item (string), a quantity (integer), 
and price per item (float), and a total cost. 

Your program is to check to see if the file called “inventory.txt” 
already exists and if it does, read it into an array of structures.  
Otherwise, it will create a new file.   The program should have a menu that 
asks the user to 
1) print parts 
2) enter a new part 
3) modify a part 
4) print inventory total 
5) exit the program.  
* If the user enters 1, all of the parts will be printed to the screen.  
* If the user enters 2, the program will ask the user for the description, 
quantity, and price per item and calculate the total cost.  
* If the user selects 3, the program should ask the user for the part number 
to be modified and all of the new information for that part.   
* If the user selects 4, you are to print the total cost of the inventory 
items to the screen.   
* When the user selects 5 to exit the program, you are to write each 
record to the text file “inventory.txt”.  

Structure member definitions:

part number is an integer that can hold part numbers from 1 to 100 – 
generated by your program.  
item is a string that may have spaces
quantity is an integer that will contain how many of the part is in inventory
price will be a float that will contain the cost per item
total cost will be a float that will hold the total cost of the item 
which the program will calculate
*/


#include <iostream>
#include <fstream>
using namespace std;

//define struct part
struct part    
{
	int part_number;
	int quantity;
	float price;
	string item;
};

int main ()
{
	
	//initialize array of parts called inventory
	part *inventory = new part[100];
	int array_length = 0;
	
	//try to open file
	ifstream infile;
	infile.open("inventory.txt");
	
	//if file !good, warning displays claiming file not found. 
	//Continues running program
	if(!infile.good())
	{
		cout << "WARNING: inventory.txt File Not Found" << endl;
		cout << "Writing new inventory.txt file" << endl << endl;
		array_length = 0;
	}
	
	//if file does exist write it into inventory array
	else
	{
		cout << "inventroy.txt file found; writing to array" << endl << endl;
		int index = 0;
		while(!infile.eof())
		{
			infile >> inventory[index].part_number >> 
				inventory[index].quantity >> inventory[index].price;
			getline(infile, inventory[index].item);
			index++;
		};
		
		//array_length will keep track of the number of items in the array
		array_length = index - 1;
		infile.close();
	};
	
	
	
	//define current program state
	bool state = true;
	
	//Program will run once and repeat itself until program exits
	do
	{
		
		//do while to handle integer options outside of (1, 2, 3, 4, or 5)
		//note: any non-integer value will make an infinite loop
		int option;
		do
		{
			//Creating menu with options
			cout << "Options: " << endl;
			cout << "Press 1 to Print Parts" << endl;
			cout << "Press 2 to Enter New Part" << endl;
			cout << "Press 3 to Modify Part" << endl;
			cout << "Press 4 to Print Inventory Total" << endl;
			cout << "Press 5 to Exit Program" << endl;
			cin >> option;
			if(!((option == 1) | (option == 2) | (option == 3) | (option == 4) | (option == 5)))
			{	
				cout << "Invalid option; Please choose an integer from 1 to 5: " << endl << endl;
			};
		}
		while(!((option == 1) | (option == 2) | (option == 3) | (option == 4) | (option == 5)));
		
		
		cout << endl << "You choose option (Enter Integer): " << option << endl;
		
		
		//Switch statement with cases for each option
		switch(option)
		{
			
			//Print Parts option
			case 1 : 
			{
				//If array has no items yet returns an error
			    if(array_length == 0)
		   	    {
					cout << "Error: array length 0" << endl << endl;
				}
					
				//If items exists, this will print all items
				else
				{
					
					//Header
					cout << "Part# " << "Quantity " << "Price " << "Item " << 
						endl;
						
					//for loop to print all items in array
					for(int index = 0; index < array_length; index++)
					{
						cout << inventory[index].part_number << " " << 
							inventory[index].quantity << " $" << 
							inventory[index].price << " " << 
							inventory[index].item << endl;
					};
				};
				cout << endl;
				break;
			};
			
			//Enter new part option
			case 2 : 
			{
				
				//enter item name
				cout << "Enter a new part (String): " << endl;
				cout << "Enter item: ";
				cin.ignore();
				getline(cin, inventory[array_length].item);
				cout << endl;
				
				//enter quantity of item 
				cout << "Enter quantity (Integer): ";
				cin >> inventory[array_length].quantity;
				cout << endl;
				
				//enter price of item 
				cout << "Enter price (Float): ";
				cin >> inventory[array_length].price;
				cout << endl;
				
				//places item into bottom of array
				inventory[array_length].part_number = array_length + 1;
				
				//add to array_length for placement of new item
				array_length++;
				break;
			}; 
			
			//Modify part option
			case 3 : 
			{
				
				//keeps track of part to modify
				int part_number;
			
				//enter part number of what part you want to modify
				cout << "Enter part number of part to modify (Integer): ";
				cin >> part_number;
					
				//prints the selected item 
				cout << inventory[part_number - 1].part_number << " " << 
					inventory[part_number - 1].quantity << " $" << 
					inventory[part_number - 1].price <<
					" " << inventory[part_number - 1].item << endl << endl;
					 
				//enter modified item name 
				cout << "Enter item (String): ";
				cin.ignore();
				getline(cin, inventory[part_number - 1].item);
				cout << endl;
				
				//enter modified item quantity	 
				cout << "Enter quantity (Integer): ";
				cin >> inventory[part_number - 1].quantity;
				cout << endl;
					
				//enter modified price
				cout << "Enter price (Float): ";
				cin >> inventory[part_number - 1].price;
				cout << endl;
				break;
			};	
			
			//Print total inventory cost option	 
			case 4 : 
			{
				
				//sum and temp are floats to account for cents
				float sum = 0;
				float temp;
				
				//for loop to traverse array obtaining total cost of each item
				for(int index = 0; index < array_length; index++)
				{
					temp = inventory[index].quantity * inventory[index].price;
					sum += temp;
				};
				
				//print total cost of inventory
				cout << "Total cost of inventory: $" << sum << endl << endl;
				break;
			};
			
			//change state to false so program exits
			case 5 : 
			{
				state = false;
				break;
			};
		};
	}
	while(state);
	
	//output file
	ofstream outfile;
	outfile.open("inventory.txt", ios::trunc);
	
	//write array to the outfile
	for(int index = 0; index < array_length; index++)
	{
		outfile << inventory[index].part_number << " ";
		outfile << inventory[index].quantity << " ";
		outfile << inventory[index].price << " ";
		outfile << inventory[index].item << endl;
	};

	//close the outfile
	outfile.close();
	return 0;
};
